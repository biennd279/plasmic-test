{"version":3,"file":"plasmic-nav.cjs.production.min.js","sources":["../src/PlasmicNavigationBar.tsx"],"sourcesContent":["import { ComponentMeta, PlasmicCanvasContext } from \"@plasmicapp/host\";\nimport registerComponent, {\n  CanvasComponentProps,\n} from \"@plasmicapp/host/registerComponent\";\nimport React from \"react\";\n\ninterface Props extends CanvasComponentProps {\n  brand?: React.ReactNode;\n  menuItems?: React.ReactNode;\n  className?: string;\n  closeButton?: React.ReactNode;\n  openButton?: React.ReactNode;\n  forceOpenMenu?: boolean;\n  itemsGap?: number;\n  responsiveBreakpoint?: number;\n}\n\nconst CSSClasses = {\n  container: \"plasmic-nav-container\",\n  menuButton: \"plasmic-nav-menu-button\",\n  menuItemsContainer: \"plasmic-nav-menu-items\",\n  menuItemsContainerOpen: \"plasmic-nav-menu-items-open\",\n};\n\nconst DEFAULT_GAP = 8;\nconst DEFAULT_RESPONSIVE_BREAKPOINT = 768;\nexport function NavigationBar(props: Props) {\n  const { forceOpenMenu } = props;\n  const [isOpen, setIsOpen] = React.useState(false);\n  const inEditor = React.useContext(PlasmicCanvasContext);\n\n  const shouldRenderMenu = React.useMemo(() => {\n    if (inEditor && forceOpenMenu) {\n      return true;\n    }\n\n    return isOpen;\n  }, [inEditor, forceOpenMenu, isOpen]);\n\n  const toggleMenu = () => setIsOpen((value) => !value);\n\n  // Parsing the gap manually to ensure it's a valid number\n  // as we are using it in dangerouslySetInnerHTML.\n  const gap = safeParseNumber(props.itemsGap, DEFAULT_GAP);\n  const responsiveBreakpoint = safeParseNumber(\n    props.responsiveBreakpoint,\n    DEFAULT_RESPONSIVE_BREAKPOINT\n  );\n\n  const cssStyles = React.useMemo(\n    () =>\n      minifyCss(`\n    /* Shared Styles */\n    .${CSSClasses.container} {\n      box-sizing: border-box;\n    }\n\n    .${CSSClasses.menuItemsContainer} {\n      box-sizing: border-box;\n      display: flex;\n    }\n\n    .${CSSClasses.menuItemsContainer} > * {\n      flex: 0 0 auto;\n    }\n\n    /* Desktop Styles */\n    @media (min-width: ${responsiveBreakpoint + 1}px) {\n      .${CSSClasses.menuButton} {\n        display: none;\n      }\n\n      .${CSSClasses.menuItemsContainer} {\n        flex-direction: row;\n        align-items: center;\n        width: auto;\n      }\n      .${CSSClasses.menuItemsContainer} > *:not(:first-child) {\n        margin-inline-start: ${gap}px;\n      }\n    }\n\n    /* Mobile Styles */\n    @media (max-width: ${responsiveBreakpoint}px) {\n      .${CSSClasses.menuButton} {\n        unset: all;\n        -webkit-appearance: none;\n        min-width: 40px;\n        min-height: 40px;\n        padding: 0;\n        margin: 0;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        background: none;\n        cursor: pointer;\n      }\n\n      .${CSSClasses.menuItemsContainer}:not(.${\n        CSSClasses.menuItemsContainerOpen\n      }) {\n        display: none;\n      }\n\n      .${CSSClasses.menuItemsContainer} {\n        margin-top: 10px;\n        flex-direction: column;\n        flex-shrink: 0;\n        width: 100%;\n      }\n      .${CSSClasses.menuItemsContainer} > *:not(:first-child) {\n        margin-top: ${gap}px;\n      }\n    }\n    `),\n    [gap, responsiveBreakpoint]\n  );\n\n  return (\n    <div className={`${CSSClasses.container} ${props.className}`}>\n      <style dangerouslySetInnerHTML={{ __html: cssStyles }} />\n      <div>{props.brand}</div>\n      <button\n        className={CSSClasses.menuButton}\n        onClick={toggleMenu}\n        tabIndex={0}\n        aria-expanded={shouldRenderMenu}\n      >\n        {shouldRenderMenu ? props.closeButton : props.openButton}\n      </button>\n      <nav\n        role=\"menu\"\n        className={`${CSSClasses.menuItemsContainer} ${\n          shouldRenderMenu ? CSSClasses.menuItemsContainerOpen : \"\"\n        }`.trim()}\n      >\n        {props.menuItems}\n      </nav>\n    </div>\n  );\n}\n\nfunction safeParseNumber(input: any, defaultValue: number = 0) {\n  const parsedValue = parseInt(input, 10);\n  return isNaN(parsedValue) ? defaultValue : parsedValue;\n}\n\nfunction minifyCss(input: string) {\n  return input\n    .replace(/\\s{2,}|\\n/g, \"\") //  Remove spaces\n    .replace(/\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/g, \"\"); // Remove comments.\n}\n\nexport const navigationBarComponentMeta: ComponentMeta<Props> = {\n  name: `hostless-plasmic-navigation-bar`,\n  displayName: \"Navigation Bar\",\n  importName: \"NavigationBar\",\n  importPath: \"@plasmicpkgs/plasmic-nav\",\n  props: {\n    // Properties\n    forceOpenMenu: {\n      displayName: \"Force Open Menu\",\n      description:\n        \"Use this option to open the menu during design time so you can easily customize the close button and menu items for small screens. This option is ignored when publishing the page.\",\n      type: \"boolean\",\n    },\n    itemsGap: {\n      displayName: \"Items Gap\",\n      description: \"The width of the space between menu items in pixels.\",\n      type: \"number\",\n      min: 0,\n      defaultValue: DEFAULT_GAP,\n    },\n    responsiveBreakpoint: {\n      displayName: \"Small Screens Breakpoint\",\n      description:\n        \"The maximum screen width used for showing the small screens version of the menu.\",\n      type: \"number\",\n      min: 0,\n      defaultValue: DEFAULT_RESPONSIVE_BREAKPOINT,\n    },\n\n    // Slots\n    brand: {\n      type: \"slot\",\n      defaultValue: [\n        {\n          type: \"hbox\",\n          tag: \"a\",\n          attrs: { href: \"#\" },\n          styles: { padding: \"0px\" },\n          children: {\n            type: \"img\",\n            src: \"https://static1.plasmic.app/nav-logo-placeholder.svg\",\n            styles: { height: \"40px\" },\n          },\n        },\n      ],\n    },\n    openButton: {\n      type: \"slot\",\n      defaultValue: {\n        type: \"img\",\n        src: \"https://static1.plasmic.app/menu.svg\",\n      },\n    },\n    closeButton: {\n      type: \"slot\",\n      defaultValue: {\n        type: \"img\",\n        src: \"https://static1.plasmic.app/close.svg\",\n      },\n    },\n    menuItems: {\n      type: \"slot\",\n      defaultValue: [\"Home\", \"About\", \"Contact\"].map((title) => ({\n        type: \"text\",\n        tag: \"a\",\n        attrs: { href: \"/\" },\n        styles: { width: \"auto\" },\n        value: title,\n      })),\n    },\n  },\n  defaultStyles: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    padding: \"16px\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    marginBottom: \"20px\",\n  },\n};\n\nexport function registerNavigationBar(\n  loader?: { registerComponent: typeof registerComponent },\n  customMetaProps?: ComponentMeta<React.ComponentProps<typeof NavigationBar>>\n) {\n  if (loader) {\n    loader.registerComponent(\n      NavigationBar,\n      customMetaProps ?? navigationBarComponentMeta\n    );\n  } else {\n    registerComponent(\n      NavigationBar,\n      customMetaProps ?? navigationBarComponentMeta\n    );\n  }\n}\n"],"names":["NavigationBar","props","forceOpenMenu","_React$useState","React","useState","isOpen","setIsOpen","inEditor","useContext","PlasmicCanvasContext","shouldRenderMenu","useMemo","gap","safeParseNumber","itemsGap","responsiveBreakpoint","cssStyles","replace","className","CSSClasses","dangerouslySetInnerHTML","__html","brand","onClick","value","tabIndex","closeButton","openButton","role","trim","menuItems","input","defaultValue","parsedValue","parseInt","isNaN","navigationBarComponentMeta","name","displayName","importName","importPath","description","type","min","tag","attrs","href","styles","padding","children","src","height","map","title","width","defaultStyles","display","flexDirection","justifyContent","flexWrap","alignItems","marginBottom","loader","customMetaProps","registerComponent"],"mappings":"8PA0BgBA,EAAcC,GAC5B,IAAQC,EAAkBD,EAAlBC,cACRC,EAA4BC,EAAMC,UAAS,GAApCC,EAAMH,KAAEI,EAASJ,KAClBK,EAAWJ,EAAMK,WAAWC,wBAE5BC,EAAmBP,EAAMQ,SAAQ,WACrC,SAAIJ,IAAYN,IAITI,IACN,CAACE,EAAUN,EAAeI,IAMvBO,EAAMC,EAAgBb,EAAMc,SAnBhB,GAoBZC,EAAuBF,EAC3Bb,EAAMe,qBApB4B,KAwB9BC,EAAYb,EAAMQ,SACtB,WAAA,6TAiBqBI,EAAuB,kSAWjBH,4EAKNG,yrBA6BHH,+BAsCjBK,QAAQ,aAAc,IACtBA,QAAQ,oCAAqC,MAnC9C,CAACL,EAAKG,IAGR,OACEZ,uBAAKe,UAAcC,yBAAwBnB,EAAMkB,WAC/Cf,yBAAOiB,wBAAyB,CAAEC,OAAQL,KAC1Cb,2BAAMH,EAAMsB,OACZnB,0BACEe,UAzGM,0BA0GNK,QAtFa,WAAH,OAASjB,GAAU,SAACkB,GAAK,OAAMA,MAuFzCC,SAAU,kBACKf,GAEdA,EAAmBV,EAAM0B,YAAc1B,EAAM2B,YAEhDxB,uBACEyB,KAAK,OACLV,WAAcC,2BACZT,EAjHgB,8BAiHuC,KACtDmB,QAEF7B,EAAM8B,YAMf,SAASjB,EAAgBkB,EAAYC,YAAAA,IAAAA,EAAuB,GAC1D,IAAMC,EAAcC,SAASH,EAAO,IACpC,OAAOI,MAAMF,GAAeD,EAAeC,MAShCG,EAAmD,CAC9DC,uCACAC,YAAa,iBACbC,WAAY,gBACZC,WAAY,2BACZxC,MAAO,CAELC,cAAe,CACbqC,YAAa,kBACbG,YACE,sLACFC,KAAM,WAER5B,SAAU,CACRwB,YAAa,YACbG,YAAa,uDACbC,KAAM,SACNC,IAAK,EACLX,aApJc,GAsJhBjB,qBAAsB,CACpBuB,YAAa,2BACbG,YACE,mFACFC,KAAM,SACNC,IAAK,EACLX,aA3JgC,KA+JlCV,MAAO,CACLoB,KAAM,OACNV,aAAc,CACZ,CACEU,KAAM,OACNE,IAAK,IACLC,MAAO,CAAEC,KAAM,KACfC,OAAQ,CAAEC,QAAS,OACnBC,SAAU,CACRP,KAAM,MACNQ,IAAK,uDACLH,OAAQ,CAAEI,OAAQ,YAK1BxB,WAAY,CACVe,KAAM,OACNV,aAAc,CACZU,KAAM,MACNQ,IAAK,yCAGTxB,YAAa,CACXgB,KAAM,OACNV,aAAc,CACZU,KAAM,MACNQ,IAAK,0CAGTpB,UAAW,CACTY,KAAM,OACNV,aAAc,CAAC,OAAQ,QAAS,WAAWoB,KAAI,SAACC,GAAK,MAAM,CACzDX,KAAM,OACNE,IAAK,IACLC,MAAO,CAAEC,KAAM,KACfC,OAAQ,CAAEO,MAAO,QACjB9B,MAAO6B,QAIbE,cAAe,CACbC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBJ,MAAO,OACPN,QAAS,OACTW,SAAU,OACVC,WAAY,SACZC,aAAc,6GAKhBC,EACAC,GAEID,EACFA,EAAOE,kBACLjE,QACAgE,EAAAA,EAAmB3B,GAGrB4B,EACEjE,QACAgE,EAAAA,EAAmB3B"}