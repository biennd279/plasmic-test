'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var host = require('@plasmicapp/host');
var registerComponent = _interopDefault(require('@plasmicapp/host/registerComponent'));
var React = _interopDefault(require('react'));

var CSSClasses = {
  container: "plasmic-nav-container",
  menuButton: "plasmic-nav-menu-button",
  menuItemsContainer: "plasmic-nav-menu-items",
  menuItemsContainerOpen: "plasmic-nav-menu-items-open"
};
var DEFAULT_GAP = 8;
var DEFAULT_RESPONSIVE_BREAKPOINT = 768;
function NavigationBar(props) {
  var forceOpenMenu = props.forceOpenMenu;
  var _React$useState = React.useState(false),
    isOpen = _React$useState[0],
    setIsOpen = _React$useState[1];
  var inEditor = React.useContext(host.PlasmicCanvasContext);
  var shouldRenderMenu = React.useMemo(function () {
    if (inEditor && forceOpenMenu) {
      return true;
    }
    return isOpen;
  }, [inEditor, forceOpenMenu, isOpen]);
  var toggleMenu = function toggleMenu() {
    return setIsOpen(function (value) {
      return !value;
    });
  };
  // Parsing the gap manually to ensure it's a valid number
  // as we are using it in dangerouslySetInnerHTML.
  var gap = safeParseNumber(props.itemsGap, DEFAULT_GAP);
  var responsiveBreakpoint = safeParseNumber(props.responsiveBreakpoint, DEFAULT_RESPONSIVE_BREAKPOINT);
  var cssStyles = React.useMemo(function () {
    return minifyCss("\n    /* Shared Styles */\n    ." + CSSClasses.container + " {\n      box-sizing: border-box;\n    }\n\n    ." + CSSClasses.menuItemsContainer + " {\n      box-sizing: border-box;\n      display: flex;\n    }\n\n    ." + CSSClasses.menuItemsContainer + " > * {\n      flex: 0 0 auto;\n    }\n\n    /* Desktop Styles */\n    @media (min-width: " + (responsiveBreakpoint + 1) + "px) {\n      ." + CSSClasses.menuButton + " {\n        display: none;\n      }\n\n      ." + CSSClasses.menuItemsContainer + " {\n        flex-direction: row;\n        align-items: center;\n        width: auto;\n      }\n      ." + CSSClasses.menuItemsContainer + " > *:not(:first-child) {\n        margin-inline-start: " + gap + "px;\n      }\n    }\n\n    /* Mobile Styles */\n    @media (max-width: " + responsiveBreakpoint + "px) {\n      ." + CSSClasses.menuButton + " {\n        unset: all;\n        -webkit-appearance: none;\n        min-width: 40px;\n        min-height: 40px;\n        padding: 0;\n        margin: 0;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border: none;\n        background: none;\n        cursor: pointer;\n      }\n\n      ." + CSSClasses.menuItemsContainer + ":not(." + CSSClasses.menuItemsContainerOpen + ") {\n        display: none;\n      }\n\n      ." + CSSClasses.menuItemsContainer + " {\n        margin-top: 10px;\n        flex-direction: column;\n        flex-shrink: 0;\n        width: 100%;\n      }\n      ." + CSSClasses.menuItemsContainer + " > *:not(:first-child) {\n        margin-top: " + gap + "px;\n      }\n    }\n    ");
  }, [gap, responsiveBreakpoint]);
  return React.createElement("div", {
    className: CSSClasses.container + " " + props.className
  }, React.createElement("style", {
    dangerouslySetInnerHTML: {
      __html: cssStyles
    }
  }), React.createElement("div", null, props.brand), React.createElement("button", {
    className: CSSClasses.menuButton,
    onClick: toggleMenu,
    tabIndex: 0,
    "aria-expanded": shouldRenderMenu
  }, shouldRenderMenu ? props.closeButton : props.openButton), React.createElement("nav", {
    role: "menu",
    className: (CSSClasses.menuItemsContainer + " " + (shouldRenderMenu ? CSSClasses.menuItemsContainerOpen : "")).trim()
  }, props.menuItems));
}
function safeParseNumber(input, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = 0;
  }
  var parsedValue = parseInt(input, 10);
  return isNaN(parsedValue) ? defaultValue : parsedValue;
}
function minifyCss(input) {
  return input.replace(/\s{2,}|\n/g, "") //  Remove spaces
  .replace(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/g, ""); // Remove comments.
}
var navigationBarComponentMeta = {
  name: "hostless-plasmic-navigation-bar",
  displayName: "Navigation Bar",
  importName: "NavigationBar",
  importPath: "@plasmicpkgs/plasmic-nav",
  props: {
    // Properties
    forceOpenMenu: {
      displayName: "Force Open Menu",
      description: "Use this option to open the menu during design time so you can easily customize the close button and menu items for small screens. This option is ignored when publishing the page.",
      type: "boolean"
    },
    itemsGap: {
      displayName: "Items Gap",
      description: "The width of the space between menu items in pixels.",
      type: "number",
      min: 0,
      defaultValue: DEFAULT_GAP
    },
    responsiveBreakpoint: {
      displayName: "Small Screens Breakpoint",
      description: "The maximum screen width used for showing the small screens version of the menu.",
      type: "number",
      min: 0,
      defaultValue: DEFAULT_RESPONSIVE_BREAKPOINT
    },
    // Slots
    brand: {
      type: "slot",
      defaultValue: [{
        type: "hbox",
        tag: "a",
        attrs: {
          href: "#"
        },
        styles: {
          padding: "0px"
        },
        children: {
          type: "img",
          src: "https://static1.plasmic.app/nav-logo-placeholder.svg",
          styles: {
            height: "40px"
          }
        }
      }]
    },
    openButton: {
      type: "slot",
      defaultValue: {
        type: "img",
        src: "https://static1.plasmic.app/menu.svg"
      }
    },
    closeButton: {
      type: "slot",
      defaultValue: {
        type: "img",
        src: "https://static1.plasmic.app/close.svg"
      }
    },
    menuItems: {
      type: "slot",
      defaultValue: /*#__PURE__*/["Home", "About", "Contact"].map(function (title) {
        return {
          type: "text",
          tag: "a",
          attrs: {
            href: "/"
          },
          styles: {
            width: "auto"
          },
          value: title
        };
      })
    }
  },
  defaultStyles: {
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
    width: "100%",
    padding: "16px",
    flexWrap: "wrap",
    alignItems: "center",
    marginBottom: "20px"
  }
};
function registerNavigationBar(loader, customMetaProps) {
  if (loader) {
    loader.registerComponent(NavigationBar, customMetaProps != null ? customMetaProps : navigationBarComponentMeta);
  } else {
    registerComponent(NavigationBar, customMetaProps != null ? customMetaProps : navigationBarComponentMeta);
  }
}

exports.NavigationBar = NavigationBar;
exports.navigationBarComponentMeta = navigationBarComponentMeta;
exports.registerNavigationBar = registerNavigationBar;
//# sourceMappingURL=plasmic-nav.cjs.development.js.map
